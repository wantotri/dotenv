set encoding=utf-8
set updatetime=100  " 100ms

" Some server have issues with backup files
set nobackup
set nowritebackup

" Set cursor type
let &t_SI = "\e[6 q"  " Insert Mode
let &t_EI = "\e[2 q"  " Everything else

" Remap leader key
let mapleader = " "

set number
set relativenumber
set nowrap
set incsearch
set nohlsearch
set signcolumn=yes
set expandtab
set shiftwidth=4
set softtabstop=4
set splitright
set splitbelow
set mouse=a

" Page Up and Down then zz
nnoremap <C-D> <C-D>zz
nnoremap <C-U> <C-U>zz

" Key bindings for Tab navigation
map <C-T><up>    :tabr<cr>
map <C-T><down>  :tabl<cr>
map <C-T><left>  :tabp<cr>
map <C-T><right> :tabn<cr>

" Save and Quit file using leader
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>

" Split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Autocomplete () bracket
inoremap ( ()<left>
inoremap <expr> ) getline('.')[col('.')-1]==')' ? '<c-g>U<right>' : ')'

" Autocomplete [] bracket
inoremap [ []<left>
inoremap <expr> ] getline('.')[col('.')-1]==']' ? '<c-g>U<right>' : ']'

" Autocomplete {} bracket
inoremap { {}<left>
inoremap <expr> } getline('.')[col('.')-1]=='}' ? '<c-g>U<right>' : '}'
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

" Press jj to exit insert mode
inoremap jj <ESC>
inoremap jk <ESC>

" Move line up and down
nnoremap <leader><Up>   ddkP==
nnoremap <leader><Down> ddp==
nnoremap } }zz
nnoremap { {zz

" FZF keybinding
" nnoremap <leader>o :FZF -m --preview bat\ --color=always\ --style=numbers\ {}<cr>

" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

" NERDTree keymappings
nnoremap <C-n>     :NERDTree<CR>
nnoremap <C-f>     :NERDTreeFind<CR>
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <leader>t :NERDTreeToggle<CR>

" Git Gutter
" highlight GitGutterAdd    guifg=#009900 ctermfg=Green
" highlight GitGutterChange guifg=#bbbb00 ctermfg=Yellow
" highlight GitGutterDelete guifg=#ff2222 ctermfg=Red
" let g:gitgutter_enabled = 1
" let g:gitgutter_map_keys = 0
" nmap ) <Plug>(GitGutterNextHunk)
" nmap ( <Plug>(GitGutterPrevHunk)

" Plugins
call plug#begin()

Plug 'vim-airline/vim-airline'

" Color Scheme
Plug 'sainnhe/everforest'
Plug 'morhetz/gruvbox'

" LSP and syntax
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'rust-lang/rust.vim'
" Plug 'yuezk/vim-js'
" Plug 'maxmellon/vim-jsx-pretty'

" Fuzzy Search
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

" Editor Setup
Plug 'preservim/nerdtree'
" Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
" Plug 'airblade/vim-gitgutter'

call plug#end()

" Important!!
if has('termguicolors')
    set termguicolors
else
    set color
    set t_Co=256  
endif

" Use gruvbox dark (or light)
set background=dark

" Make the contrast hard (or soft, medium)
let g:gruvbox_contrast_dark = 'hard'
let g:everforest_background = 'hard'
let g:everforest_better_performance = 1
let g:airline_theme = 'everforest'

" IMPORTANT: for gruvbox to work, colorscheme command
" has to be after Plug 'morhetz/gruvbox'
" Use gruvbox colorscheme
" colorscheme gruvbox
colorscheme everforest

" Transparent background
hi Normal guibg=NONE ctermbg=NONE
hi NonText ctermbg=NONE
hi EndOfBuffer guibg=NONE ctermbg=NONE

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
" inoremap <silent><expr> <TAB>
"       \ coc#pum#visible() ? coc#pum#next(1) :
"       \ CheckBackspace() ? "\<Tab>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
" inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
"                               \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" 
" function! CheckBackspace() abort
"       let col = col('.') - 1
"         return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
" nnoremap <silent> K :call ShowDocumentation()<CR>
" 
" function! ShowDocumentation()
"     if CocAction('hasProvider', 'hover')
"         call CocActionAsync('doHover')
"     else
"         call feedkeys('K', 'in')
"     endif
" endfunction

" Symbol renaming
" nmap <leader>rn <Plug>(coc-rename)
